#!/usr/bin/env python3


import json
import locale
import sys
import emails
import reports
from reportlab.lib.units import inch
from reportlab.graphics.charts.piecharts import Pie
from reportlab.graphics.shapes import Drawing

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  car_year = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales = item

    # TODO: also handle most popular car_year
    if item["car"]["car_year"] not in car_year:
      car_year[item["car"]["car_year"]] = item["total_sales"]
    else:
      car_year[item["car"]["car_year"]] += item["total_sales"]

  year_most_sales = max(car_year, key=car_year.get)

  summary = [  
    "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(max_sales["car"]["car_model"], max_sales["total_sales"]),
    "The most popular year was {} with {} sales.".format(year_most_sales, car_year[year_most_sales])
  ]

  return summary

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  # Optional Challenge: sort data based on total_sales
  sorted_car_data = sorted(car_data, key=lambda x: x["total_sales"], reverse=True)
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in sorted_car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  
  return table_data

# Optional Challenge, function to create pie chart
def data_to_pie_chart(car_data):
  """Turns the data in car_data into pie chart."""
  report_pie = Pie(width=3*inch, height=3*inch)
  sorted_data = sorted(car_data, key=lambda car: car["total_sales"], reverse=True)

  report_pie.data = []
  report_pie.labels = []

  count = 0

  ## Only include top 10 data with the most sales
  for car in sorted_data:
    report_pie.data.append(car["total_sales"])
    report_pie.labels.append("{} {} ({})".format(car["car"]["car_make"], car["car"]["car_model"], car["car"]["car_year"]))
    count += 1
    if count == 10:
      break
  
  report_chart = Drawing()
  report_chart.add(report_pie)

  return report_chart

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  summary_linebreaks = '<br/>'.join(summary)
  print(summary)

  report_chart = data_to_pie_chart(data)

  # Edit reports.py to send additional argument & parameter
  # TODO: turn this into a PDF report
  reports.generate("/tmp/cars.pdf", "A Last Month Car Sales Report", summary_linebreaks, cars_dict_to_table(data), report_chart)

  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "student@example.com"
  subject = "Sales summary for last month"
  body = summary_linebreaks
  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)